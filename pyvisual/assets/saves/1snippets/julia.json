{
    "connections": [
        {
            "dst_node_id": 34,
            "dst_port_id": "i_texture",
            "src_node_id": 33,
            "src_port_id": "o_output"
        },
        {
            "dst_node_id": 33,
            "dst_port_id": "i_input",
            "src_node_id": 35,
            "src_port_id": "o_output"
        },
        {
            "dst_node_id": 33,
            "dst_port_id": "i_time",
            "src_node_id": 36,
            "src_port_id": "o_output"
        }
    ],
    "nodes": [
        {
            "custom_ports": [
                [
                    "i_time",
                    {
                        "default": null,
                        "dtype": "float",
                        "dtype_args": {},
                        "dummy": false,
                        "group": "default",
                        "hide": false,
                        "manual_input": true,
                        "name": "time",
                        "widgets": []
                    }
                ],
                [
                    "i_time_mask",
                    {
                        "default": null,
                        "dtype": "tex2d",
                        "dtype_args": {},
                        "dummy": false,
                        "group": "default",
                        "hide": true,
                        "manual_input": true,
                        "name": "time_mask",
                        "widgets": []
                    }
                ],
                [
                    "i_time_d0",
                    {
                        "default": null,
                        "dtype": "float",
                        "dtype_args": {
                            "default": 0.0
                        },
                        "dummy": false,
                        "group": "default",
                        "hide": true,
                        "manual_input": true,
                        "name": "time_d0",
                        "widgets": []
                    }
                ],
                [
                    "i_time_d1",
                    {
                        "default": null,
                        "dtype": "float",
                        "dtype_args": {
                            "default": 0.0
                        },
                        "dummy": false,
                        "group": "default",
                        "hide": true,
                        "manual_input": true,
                        "name": "time_d1",
                        "widgets": []
                    }
                ],
                [
                    "i_mouse",
                    {
                        "default": null,
                        "dtype": "vec2",
                        "dtype_args": {},
                        "dummy": false,
                        "group": "default",
                        "hide": false,
                        "manual_input": true,
                        "name": "mouse",
                        "widgets": []
                    }
                ]
            ],
            "id": 33,
            "manual_values": {
                "i_enable_time_mask": 0.0,
                "i_enabled": 1.0,
                "i_force_change": 42.0,
                "i_fragment_source": "\n#include <generate/timemasked/base.frag>\n// Shader downloaded and adapted from glslsandbox.com\n// URL: http://glslsandbox.com/e#52168.0\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n;\n\n//another holy grail candidate from msltoe found here:\n//http://www.fractalforums.com/theory/choosing-the-squaring-formula-by-location\n\n//I have altered the formula to make it continuous but it still creates the same nice julias - eiffie\n\n#define size pyvisualResolution\n\nvec3 C,mcol;\nbool bColoring=false;\n\nuniform vec2 mouse;\nfloat leng(vec3 sp){\n\tfloat suma = abs(sp.x)+abs(sp.y)+abs(sp.z);\n\treturn mix(length(sp), suma, mouse.x);\n}\n#define pi 3.14159265\nfloat DE(in vec3 p){\n\tfloat dr=1.0,r=length(p);\n\t//C=p;\n\tfor(int i=0;i<10;i++){\n\t\tif(r>20.0)break;\n\t\tdr=dr*2.0*r;\n\t\tfloat psi = abs(mod(atan(p.z,p.y)+pi/8.0,pi/4.0)-pi/8.0);\n\t\tp.yz=vec2(cos(psi),sin(psi))*length(p.yz);\n\t\tvec3 p2=p*p;\n\t\tp=vec3(vec2(p2.x-p2.y,2.0*p.x*p.y)*(1.0-p2.z/(p2.x+p2.y+p2.z)),\n\t\t\t2.0*p.z*sqrt(p2.x+p2.y))+C;\t\n\t\tr=leng(p);\n\t\tif(bColoring && i==3)mcol=p;\n\t}\n\treturn min(log(r)*r/max(dr,1.0),1.0);\n}\n\nfloat rnd(vec2 c){return fract(sin(dot(vec2(1.317,19.753),c))*413.7972);}\nfloat rndStart(vec2 fragCoord){\n\treturn 0.5+0.5*rnd(fragCoord.xy+vec2(pyvisualTime*217.0));\n}\nfloat shadao(vec3 ro, vec3 rd, float px, vec2 fragCoord){//pretty much IQ's SoftShadow\n\tfloat res=1.0,d,t=2.0*px*rndStart(fragCoord);\n\tfor(int i=0;i<4;i++){\n\t\td=max(px,DE(ro+rd*t)*1.5);\n\t\tt+=d;\n\t\tres=min(res,d/t+t*0.1);\n\t}\n\treturn res;\n}\nvec3 Sky(vec3 rd){//what sky??\n\treturn vec3(0.5+0.5*rd.y);\n}\nvec3 L;\nvec3 Color(vec3 ro, vec3 rd, float t, float px, vec3 col, bool bFill, vec2 fragCoord){\n\tro+=rd*t;\n\tbColoring=true;float d=DE(ro);bColoring=false;\n\tvec2 e=vec2(px*t,0.0);\n\tvec3 dn=vec3(DE(ro-e.xyy),DE(ro-e.yxy),DE(ro-e.yyx));\n\tvec3 dp=vec3(DE(ro+e.xyy),DE(ro+e.yxy),DE(ro+e.yyx));\n\tvec3 N=(dp-dn)/(length(dp-vec3(d))+length(vec3(d)-dn));\n\tvec3 R=reflect(rd,N);\n\tvec3 lc=vec3(1.0,0.9,0.8),sc=sqrt(abs(sin(mcol))),rc=Sky(R);\n\tfloat sh=clamp(shadao(ro,L,px*t,fragCoord)+0.2,0.0,1.0);\n\tsh=sh*(0.5+0.5*dot(N,L))*exp(-t*0.125);\n\tvec3 scol=sh*lc*(sc+rc*pow(max(0.0,dot(R,L)),4.0));\n\tif(bFill)d*=0.05;\n\tcol=mix(scol,col,clamp(d/(px*t),0.0,1.0));\n\treturn col;\n}\nmat3 lookat(vec3 fw){\n\tfw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw);\n}\n\nvec3 Julia(float t){\n\tt=mod(t,5.0);\n\tif(t<1.0)return vec3(-0.8,0.0,0.0);\n\tif(t<2.0)return vec3(-0.8,0.62,0.41);\n\tif(t<3.0)return vec3(-0.8,1.0,-0.69);\n\tif(t<4.0)return vec3(0.5,-0.84,-0.13);\n\treturn vec3(0.0,1.0,-1.0);\n}\n\n\n\nvoid generateFrag() {\n\n\n\tfloat px=0.5/size.y;\n\tL=normalize(vec3(0.4,0.8,-0.6));\n\tfloat tim=pyvisualTime*0.5;\n\t\n\tvec3 ro=vec3(cos(tim*1.3),sin(tim*0.4),sin(tim))*3.0;\n\tvec3 rd=lookat(vec3(-0.1)-ro)*normalize(vec3((2.0*(vec2(pyvisualUV.x, 1.0 - pyvisualUV.y) * pyvisualResolution).xy-size.xy)/size.y,3.0));\n\t\n\ttim*=0.6;\n\tif(mod(tim,15.0)<5.0)C=mix(Julia(tim-1.0),Julia(tim),smoothstep(0.0,1.0,fract(tim)*5.0));\n\telse C=vec3(-cos(tim),cos(tim)*abs(sin(tim*0.3)),-0.5*abs(-sin(tim)));\n\n\tfloat t=DE(ro)*rndStart((vec2(pyvisualUV.x, 1.0 - pyvisualUV.y) * pyvisualResolution).xy),d=0.0,od=10.0;\n\tvec3 edge=vec3(-1.0);\n\tbool bGrab=false;\n\tvec3 col=Sky(rd);\n\tfor(int i=0;i<78;i++){\n\t\tt+=d*0.5;\n\t\td=DE(ro+rd*t);\n\t\tif(d>od){\n\t\t\tif(bGrab && od<px*t && edge.x<0.0){\n\t\t\t\tedge=vec3(edge.yz,t-od);\n\t\t\t\tbGrab=false;\n\t\t\t}\n\t\t}else bGrab=true;\n\t\tod=d;\n\t\tif(t>10.0 || d<0.00001)break;\n\t}\n\tbool bFill=false;\n\td*=0.05;\n\tif(d<px*t && t<10.0){\n\t\tif(edge.x>0.0)edge=edge.zxy;\n\t\tedge=vec3(edge.yz,t);\n\t\tbFill=true;\n\t}\n\tfor(int i=0;i<3;i++){\n\t\tif(edge.z>0.0)col=Color(ro,rd,edge.z,px,col,bFill,(vec2(pyvisualUV.x, 1.0 - pyvisualUV.y) * pyvisualResolution).xy);\n\t\tedge=edge.zxy;\n\t\tbFill=false;\n\t}\n\tpyvisualOutColor = vec4(2.0*col,1.0);\n}\n\n",
                "i_id": "52168.0",
                "i_input": "",
                "i_interpolation": 1.0,
                "i_mouse": [
                    0.0,
                    0.0
                ],
                "i_sizeref": "",
                "i_time": 0.0,
                "i_time_d0": 0.0,
                "i_time_d1": 0.0,
                "i_time_mask": "",
                "i_transformUV": [
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        1.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        1.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        1.0
                    ]
                ],
                "i_wrapping": 1.0,
                "o_enabled": 1.0,
                "o_output": ""
            },
            "type": "GLSLSandbox",
            "ui_data": {
                "collapsed": false,
                "pos": [
                    2978.0,
                    732.0
                ],
                "selected": false
            }
        },
        {
            "custom_ports": [],
            "id": 34,
            "manual_values": {
                "i_texture": ""
            },
            "type": "Renderer",
            "ui_data": {
                "collapsed": false,
                "pos": [
                    3429.0,
                    761.0
                ],
                "selected": false
            }
        },
        {
            "custom_ports": [],
            "id": 35,
            "manual_values": {
                "i_name": "ref_lowres",
                "o_output": ""
            },
            "type": "GetTextureVar",
            "ui_data": {
                "collapsed": true,
                "pos": [
                    2599.0,
                    717.0
                ],
                "selected": false
            }
        },
        {
            "custom_ports": [],
            "id": 36,
            "manual_values": {
                "i_factor": 1.0,
                "i_mod": 0.0,
                "i_reset": 0.0,
                "o_output": 138.83541059494019
            },
            "type": "Time",
            "ui_data": {
                "collapsed": false,
                "pos": [
                    2630.0,
                    888.0
                ],
                "selected": false
            }
        }
    ],
    "ui_data": {
        "offset": [
            2074.0,
            396.0
        ]
    }
}