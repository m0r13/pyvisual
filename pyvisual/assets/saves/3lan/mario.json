{"connections": [{"dst_node_id": 4, "dst_port_id": "i_input1", "src_node_id": 0, "src_port_id": "o_output"}, {"dst_node_id": 0, "dst_port_id": "i_input", "src_node_id": 2, "src_port_id": "o_output"}, {"dst_node_id": 13, "dst_port_id": "i_input", "src_node_id": 4, "src_port_id": "o_output"}, {"dst_node_id": 4, "dst_port_id": "i_input0", "src_node_id": 3, "src_port_id": "o_output"}, {"dst_node_id": 10, "dst_port_id": "i_t1", "src_node_id": 5, "src_port_id": "o_output"}, {"dst_node_id": 5, "dst_port_id": "i_t1", "src_node_id": 6, "src_port_id": "o_output"}, {"dst_node_id": 10, "dst_port_id": "i_t2", "src_node_id": 7, "src_port_id": "o_output"}, {"dst_node_id": 3, "dst_port_id": "i_input", "src_node_id": 8, "src_port_id": "o_output"}, {"dst_node_id": 7, "dst_port_id": "i_y", "src_node_id": 9, "src_port_id": "o_output"}, {"dst_node_id": 3, "dst_port_id": "i_transformUV", "src_node_id": 10, "src_port_id": "o_output"}, {"dst_node_id": 5, "dst_port_id": "i_t2", "src_node_id": 11, "src_port_id": "o_output"}, {"dst_node_id": 11, "dst_port_id": "i_theta", "src_node_id": 12, "src_port_id": "o_output"}, {"dst_node_id": 25, "dst_port_id": "i_input", "src_node_id": 13, "src_port_id": "o_output"}, {"dst_node_id": 14, "dst_port_id": "i_uMask", "src_node_id": 15, "src_port_id": "o_output"}, {"dst_node_id": 16, "dst_port_id": "i_input1", "src_node_id": 14, "src_port_id": "o_output"}, {"dst_node_id": 1, "dst_port_id": "i_texture", "src_node_id": 16, "src_port_id": "o_output"}, {"dst_node_id": 18, "dst_port_id": "i_input", "src_node_id": 17, "src_port_id": "o_output"}, {"dst_node_id": 16, "dst_port_id": "i_input2", "src_node_id": 18, "src_port_id": "o_output"}, {"dst_node_id": 18, "dst_port_id": "i_uFactorRight", "src_node_id": 20, "src_port_id": "o_output"}, {"dst_node_id": 22, "dst_port_id": "i_input", "src_node_id": 21, "src_port_id": "o_output"}, {"dst_node_id": 24, "dst_port_id": "i_global_speed", "src_node_id": 22, "src_port_id": "o_output"}, {"dst_node_id": 0, "dst_port_id": "i_time", "src_node_id": 24, "src_port_id": "o_value"}, {"dst_node_id": 18, "dst_port_id": "i_uFactorLeft", "src_node_id": 19, "src_port_id": "o_output"}, {"dst_node_id": 32, "dst_port_id": "i_input", "src_node_id": 25, "src_port_id": "o_output"}, {"dst_node_id": 28, "dst_port_id": "i_input", "src_node_id": 25, "src_port_id": "o_output"}, {"dst_node_id": 27, "dst_port_id": "i_input", "src_node_id": 26, "src_port_id": "o_output"}, {"dst_node_id": 0, "dst_port_id": "i_transformUV", "src_node_id": 27, "src_port_id": "o_output"}, {"dst_node_id": 29, "dst_port_id": "i_input", "src_node_id": 28, "src_port_id": "o_output"}, {"dst_node_id": 30, "dst_port_id": "i_input", "src_node_id": 29, "src_port_id": "o_output"}, {"dst_node_id": 37, "dst_port_id": "i_input", "src_node_id": 31, "src_port_id": "o_output"}, {"dst_node_id": 14, "dst_port_id": "i_input", "src_node_id": 30, "src_port_id": "o_output"}, {"dst_node_id": 45, "dst_port_id": "i_input", "src_node_id": 32, "src_port_id": "o_output"}, {"dst_node_id": 32, "dst_port_id": "i_uBrightness", "src_node_id": 33, "src_port_id": "o_output"}, {"dst_node_id": 40, "dst_port_id": "i_generate", "src_node_id": 34, "src_port_id": "o_event"}, {"dst_node_id": 41, "dst_port_id": "i_generate", "src_node_id": 34, "src_port_id": "o_event"}, {"dst_node_id": 35, "dst_port_id": "i_input", "src_node_id": 34, "src_port_id": "o_event"}, {"dst_node_id": 37, "dst_port_id": "i_enabled", "src_node_id": 35, "src_port_id": "o_output"}, {"dst_node_id": 37, "dst_port_id": "i_timeH", "src_node_id": 36, "src_port_id": "o_output"}, {"dst_node_id": 30, "dst_port_id": "i_mask", "src_node_id": 37, "src_port_id": "o_output"}, {"dst_node_id": 37, "dst_port_id": "i_timeV", "src_node_id": 38, "src_port_id": "o_output"}, {"dst_node_id": 37, "dst_port_id": "i_uTransformGlitch", "src_node_id": 39, "src_port_id": "o_output"}, {"dst_node_id": 39, "dst_port_id": "i_theta", "src_node_id": 40, "src_port_id": "o_output"}, {"dst_node_id": 37, "dst_port_id": "i_slices", "src_node_id": 41, "src_port_id": "o_output"}, {"dst_node_id": 25, "dst_port_id": "i_uPreTransform", "src_node_id": 42, "src_port_id": "o_output"}, {"dst_node_id": 44, "dst_port_id": "i_toggle", "src_node_id": 43, "src_port_id": "o_event"}, {"dst_node_id": 25, "dst_port_id": "i_uInvertVertical", "src_node_id": 44, "src_port_id": "o_output"}, {"dst_node_id": 30, "dst_port_id": "i_foreground", "src_node_id": 45, "src_port_id": "o_output"}, {"dst_node_id": 47, "dst_port_id": "i_v1", "src_node_id": 46, "src_port_id": "o_output"}, {"dst_node_id": 45, "dst_port_id": "i_enabled", "src_node_id": 47, "src_port_id": "o_output"}, {"dst_node_id": 49, "dst_port_id": "i_input", "src_node_id": 48, "src_port_id": "o_event"}, {"dst_node_id": 47, "dst_port_id": "i_v0", "src_node_id": 49, "src_port_id": "o_output"}], "nodes": [{"custom_ports": [["i_time", {"default": null, "dtype": "float", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "time", "widgets": []}], ["i_time_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "time_mask", "widgets": []}], ["i_time_d0", {"default": null, "dtype": "float", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "time_d0", "widgets": []}], ["i_time_d1", {"default": null, "dtype": "float", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "time_d1", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 0, "manual_values": {"i_enable_time_mask": 1.0, "i_enabled": 1.0, "i_fragment_source": "\n#include <generate/base_time_mask.frag>\n// Shader downloaded and adapted from glslsandbox.com\n// URL: http://glslsandbox.com/e#45233.0\n\n/*\n * Original shader from: https://www.shadertoy.com/view/Msj3zD\n */\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// glslsandbox uniforms\n\n;\n\n// shadertoy globals\nvec3  iResolution;\nfloat iTime;\n\n// Protect glslsandbox uniform names\n#define pyvisualTime        stemu_pyvisualTime\n#define pyvisualResolution  stemu_pyvisualResolution\n\n// --------[ Original ShaderToy begins here ]---------- //\n// Super Mario Bros. by HLorenzi\n\n// If it does not run at 60 FPS,\n// try pausing/turning off the music!\n\n// Uncomment for totally random level!\n// Just to show off Mario's dynamic movements :P\n//#define TOTALLY_RANDOM_LEVEL 1\n\n\t\n// Positions to start and end Mario simulation (relative to screen position)\n// You can try changing these! (the difference between the two should be a multiple of 4)\n// Put startX too close to endX, and Mario'll experience jittering!\n#define startX  0.0\n#define endX   80.0\n\n\n\n\n#define RGB(r,g,b) vec4(float(r)/255.0,float(g)/255.0,float(b)/255.0,1.0)\nconst vec4 bg = vec4(RGB(107,140,255).rgb, 0.0);\n\n#define SPRROW(x,a,b,c,d,e,f,g,h, i,j,k,l,m,n,o,p) (x <= 7 ? SPRROW_H(a,b,c,d,e,f,g,h) : SPRROW_H(i,j,k,l,m,n,o,p))\n#define SPRROW_H(a,b,c,d,e,f,g,h) (a+4.0*(b+4.0*(c+4.0*(d+4.0*(e+4.0*(f+4.0*(g+4.0*(h))))))))\n#define SECROW(x,a,b,c,d,e,f,g,h) (x <= 3 ? SECROW_H(a,b,c,d) : SECROW_H(e,f,g,h))\n#define SECROW_H(a,b,c,d) (a+8.0*(b+8.0*(c+8.0*(d))))\n#define SELECT(x,i) mod(floor(i/pow(4.0,float(x))),4.0)\n#define SELECTSEC(x,i) mod(floor(i/pow(8.0,float(x))),8.0)\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec4 sprGround(int x, int y)\n{\n\tfloat col = 0.0;\n\tif (y == 15) col = SPRROW(x,1.,0.,0.,0.,0.,0.,0.,0., 0.,2.,1.,0.,0.,0.,0.,1.);\n\tif (y == 14) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,2.,0.,1.,1.,1.,1.,2.);\n\tif (y == 13) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,2.,0.,1.,1.,1.,1.,2.);\n\tif (y == 12) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,2.,0.,1.,1.,1.,1.,2.);\n\tif (y == 11) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,2.,0.,2.,1.,1.,1.,2.);\n\tif (y == 10) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,2.,1.,2.,2.,2.,2.,1.);\n\tif (y ==  9) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,2.,0.,0.,0.,0.,0.,2.);\n\tif (y ==  8) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,2.,0.,1.,1.,1.,1.,2.);\n\t\n\tif (y ==  7) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,2.,0.,1.,1.,1.,1.,2.);\n\tif (y ==  6) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,2.,0.,1.,1.,1.,1.,2.);\n\tif (y ==  5) col = SPRROW(x,2.,2.,1.,1.,1.,1.,1.,1., 2.,0.,1.,1.,1.,1.,1.,2.);\n\tif (y ==  4) col = SPRROW(x,0.,0.,2.,2.,1.,1.,1.,1., 2.,0.,1.,1.,1.,1.,1.,2.);\n\tif (y ==  3) col = SPRROW(x,0.,1.,0.,0.,2.,2.,2.,2., 0.,1.,1.,1.,1.,1.,1.,2.);\n\tif (y ==  2) col = SPRROW(x,0.,1.,1.,1.,0.,0.,0.,2., 0.,1.,1.,1.,1.,1.,1.,2.);\n\tif (y ==  1) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,2., 0.,1.,1.,1.,1.,1.,2.,2.);\n\tif (y ==  0) col = SPRROW(x,1.,2.,2.,2.,2.,2.,2.,1., 0.,2.,2.,2.,2.,2.,2.,1.);\n\t\n\tcol = SELECT(mod(float(x),8.0),col);\n\tif (col == 0.0) return RGB(247,214,181);\n\tif (col == 1.0) return RGB(231,90,16);\n\treturn RGB(0,0,0);\n}\n\nvec4 sprQuestionBlock(int x, int y)\n{\n\tfloat col = 0.0;\n\tif (y == 15) col = SPRROW(x,3.,0.,0.,0.,0.,0.,0.,0., 0.,0.,0.,0.,0.,0.,0.,3.);\n\tif (y == 14) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,2.);\n\tif (y == 13) col = SPRROW(x,0.,1.,2.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,2.,1.,2.);\n\tif (y == 12) col = SPRROW(x,0.,1.,1.,1.,1.,0.,0.,0., 0.,0.,1.,1.,1.,1.,1.,2.);\n\tif (y == 11) col = SPRROW(x,0.,1.,1.,1.,0.,0.,2.,2., 2.,0.,0.,1.,1.,1.,1.,2.);\n\tif (y == 10) col = SPRROW(x,0.,1.,1.,1.,0.,0.,2.,1., 1.,0.,0.,2.,1.,1.,1.,2.);\n\tif (y ==  9) col = SPRROW(x,0.,1.,1.,1.,0.,0.,2.,1., 1.,0.,0.,2.,1.,1.,1.,2.);\n\tif (y ==  8) col = SPRROW(x,0.,1.,1.,1.,1.,2.,2.,1., 0.,0.,0.,2.,1.,1.,1.,2.);\n\t\n\tif (y ==  7) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,0., 0.,2.,2.,2.,1.,1.,1.,2.);\n\tif (y ==  6) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,0., 0.,2.,1.,1.,1.,1.,1.,2.);\n\tif (y ==  5) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 2.,2.,1.,1.,1.,1.,1.,2.);\n\tif (y ==  4) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,0., 0.,0.,1.,1.,1.,1.,1.,2.);\n\tif (y ==  3) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,0., 0.,2.,1.,1.,1.,1.,1.,2.);\n\tif (y ==  2) col = SPRROW(x,0.,1.,2.,1.,1.,1.,1.,1., 2.,2.,1.,1.,1.,2.,1.,2.);\n\tif (y ==  1) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,2.);\n\tif (y ==  0) col = SPRROW(x,2.,2.,2.,2.,2.,2.,2.,2., 2.,2.,2.,2.,2.,2.,2.,2.);\n\t\n\tif (y < 0 || y > 15) return bg;\n\t\n\tcol = SELECT(mod(float(x),8.0),col);\n\tif (col == 0.0) return RGB(231,90,16);\n\tif (col == 1.0) return RGB(255,165,66);\n\tif (col == 2.0) return RGB(0,0,0);\n\treturn bg;\n}\n\nvec4 sprUsedBlock(int x, int y)\n{\n\tfloat col = 0.0;\n\tif (y == 15) col = SPRROW(x,3.,0.,0.,0.,0.,0.,0.,0., 0.,0.,0.,0.,0.,0.,0.,3.);\n\tif (y == 14) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\tif (y == 13) col = SPRROW(x,0.,1.,0.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,0.,1.,0.);\n\tif (y == 12) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\tif (y == 11) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\tif (y == 10) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\tif (y ==  9) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\tif (y ==  8) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\t\n\tif (y ==  7) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\tif (y ==  6) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\tif (y ==  5) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\tif (y ==  4) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\tif (y ==  3) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\tif (y ==  2) col = SPRROW(x,0.,1.,0.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,0.,1.,0.);\n\tif (y ==  1) col = SPRROW(x,0.,1.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,1.,0.);\n\tif (y ==  0) col = SPRROW(x,3.,0.,0.,0.,0.,0.,0.,0., 0.,0.,0.,0.,0.,0.,0.,3.);\n\t\n\tif (y < 0 || y > 15) return bg;\n\t\n\tcol = SELECT(mod(float(x),8.0),col);\n\tif (col == 0.0) return RGB(0,0,0);\n\tif (col == 1.0) return RGB(231,90,16);\n\treturn bg;\n}\n\nvec4 sprMarioJump(int x, int y)\n{\n\tfloat col = 0.0;\n\tif (y == 15) col = SPRROW(x,0.,0.,0.,0.,0.,0.,0.,0., 0.,0.,0.,0.,0.,2.,2.,2.);\n\tif (y == 14) col = SPRROW(x,0.,0.,0.,0.,0.,0.,1.,1., 1.,1.,1.,0.,0.,2.,2.,2.);\n\tif (y == 13) col = SPRROW(x,0.,0.,0.,0.,0.,1.,1.,1., 1.,1.,1.,1.,1.,1.,2.,2.);\n\tif (y == 12) col = SPRROW(x,0.,0.,0.,0.,0.,3.,3.,3., 2.,2.,3.,2.,0.,3.,3.,3.);\n\tif (y == 11) col = SPRROW(x,0.,0.,0.,0.,3.,2.,3.,2., 2.,2.,3.,2.,2.,3.,3.,3.);\n\tif (y == 10) col = SPRROW(x,0.,0.,0.,0.,3.,2.,3.,3., 2.,2.,2.,3.,2.,2.,2.,3.);\n\tif (y ==  9) col = SPRROW(x,0.,0.,0.,0.,3.,3.,2.,2., 2.,2.,3.,3.,3.,3.,3.,0.);\n\tif (y ==  8) col = SPRROW(x,0.,0.,0.,0.,0.,0.,2.,2., 2.,2.,2.,2.,2.,3.,0.,0.);\n\t\n\tif (y ==  7) col = SPRROW(x,0.,0.,3.,3.,3.,3.,3.,1., 3.,3.,3.,1.,3.,0.,0.,0.);\n\tif (y ==  6) col = SPRROW(x,0.,3.,3.,3.,3.,3.,3.,3., 1.,3.,3.,3.,1.,0.,0.,3.);\n\tif (y ==  5) col = SPRROW(x,2.,2.,3.,3.,3.,3.,3.,3., 1.,1.,1.,1.,1.,0.,0.,3.);\n\tif (y ==  4) col = SPRROW(x,2.,2.,2.,0.,1.,1.,3.,1., 1.,2.,1.,1.,2.,1.,3.,3.);\n\tif (y ==  3) col = SPRROW(x,0.,2.,0.,3.,1.,1.,1.,1., 1.,1.,1.,1.,1.,1.,3.,3.);\n\tif (y ==  2) col = SPRROW(x,0.,0.,3.,3.,3.,1.,1.,1., 1.,1.,1.,1.,1.,1.,3.,3.);\n\tif (y ==  1) col = SPRROW(x,0.,3.,3.,3.,1.,1.,1.,1., 1.,1.,1.,0.,0.,0.,0.,0.);\n\tif (y ==  0) col = SPRROW(x,0.,3.,0.,0.,1.,1.,1.,1., 0.,0.,0.,0.,0.,0.,0.,0.);\n\t\n\tcol = SELECT(mod(float(x),8.0),col);\n\tif (col == 0.0) return RGB(0,0,0);\n\tif (col == 1.0) return RGB(177,52,37);\n\tif (col == 2.0) return RGB(227,157,37);\n\tif (col == 3.0) return RGB(106,107,4);\n\treturn RGB(0,0,0);\n}\n\nvec4 sprMarioWalk3(int x, int y)\n{\n\tfloat col = 0.0;\n\tif (y == 15) col = SPRROW(x,0.,0.,0.,0.,0.,1.,1.,1., 1.,1.,0.,0.,0.,0.,0.,0.);\n\tif (y == 14) col = SPRROW(x,0.,0.,0.,0.,1.,1.,1.,1., 1.,1.,1.,1.,1.,0.,0.,0.);\n\tif (y == 13) col = SPRROW(x,0.,0.,0.,0.,3.,3.,3.,2., 2.,3.,2.,0.,0.,0.,0.,0.);\n\tif (y == 12) col = SPRROW(x,0.,0.,0.,3.,2.,3.,2.,2., 2.,3.,2.,2.,2.,0.,0.,0.);\n\tif (y == 11) col = SPRROW(x,0.,0.,0.,3.,2.,3.,3.,2., 2.,2.,3.,2.,2.,2.,0.,0.);\n\tif (y == 10) col = SPRROW(x,0.,0.,0.,3.,3.,2.,2.,2., 2.,3.,3.,3.,3.,0.,0.,0.);\n\tif (y ==  9) col = SPRROW(x,0.,0.,0.,0.,0.,2.,2.,2., 2.,2.,2.,2.,0.,0.,0.,0.);\n\tif (y ==  8) col = SPRROW(x,0.,0.,3.,3.,3.,3.,1.,1., 3.,3.,0.,0.,0.,0.,0.,0.);\n\t\n\tif (y ==  7) col = SPRROW(x,2.,2.,3.,3.,3.,3.,1.,1., 1.,3.,3.,3.,2.,2.,2.,0.);\n\tif (y ==  6) col = SPRROW(x,2.,2.,2.,0.,3.,3.,1.,2., 1.,1.,1.,3.,3.,2.,2.,0.);\n\tif (y ==  5) col = SPRROW(x,2.,2.,0.,0.,1.,1.,1.,1., 1.,1.,1.,0.,0.,3.,0.,0.);\n\tif (y ==  4) col = SPRROW(x,0.,0.,0.,1.,1.,1.,1.,1., 1.,1.,1.,1.,3.,3.,0.,0.);\n\tif (y ==  3) col = SPRROW(x,0.,0.,1.,1.,1.,1.,1.,1., 1.,1.,1.,1.,3.,3.,0.,0.);\n\tif (y ==  2) col = SPRROW(x,0.,3.,3.,1.,1.,1.,0.,0., 0.,1.,1.,1.,3.,3.,0.,0.);\n\tif (y ==  1) col = SPRROW(x,0.,3.,3.,3.,0.,0.,0.,0., 0.,0.,0.,0.,0.,0.,0.,0.);\n\tif (y ==  0) col = SPRROW(x,0.,0.,3.,3.,3.,0.,0.,0., 0.,0.,0.,0.,0.,0.,0.,0.);\n\t\n\tcol = SELECT(mod(float(x),8.0),col);\n\tif (col == 0.0) return RGB(0,0,0);\n\tif (col == 1.0) return RGB(177,52,37);\n\tif (col == 2.0) return RGB(227,157,37);\n\tif (col == 3.0) return RGB(106,107,4);\n\treturn RGB(0,0,0);\n}\n\n\nvec4 sprMarioWalk2(int x, int y)\n{\n\tfloat col = 0.0;\n\tif (y == 15) col = SPRROW(x,0.,0.,0.,0.,0.,1.,1.,1., 1.,1.,0.,0.,0.,0.,0.,0.);\n\tif (y == 14) col = SPRROW(x,0.,0.,0.,0.,1.,1.,1.,1., 1.,1.,1.,1.,1.,0.,0.,0.);\n\tif (y == 13) col = SPRROW(x,0.,0.,0.,0.,3.,3.,3.,2., 2.,3.,2.,0.,0.,0.,0.,0.);\n\tif (y == 12) col = SPRROW(x,0.,0.,0.,3.,2.,3.,2.,2., 2.,3.,2.,2.,2.,0.,0.,0.);\n\tif (y == 11) col = SPRROW(x,0.,0.,0.,3.,2.,3.,3.,2., 2.,2.,3.,2.,2.,2.,0.,0.);\n\tif (y == 10) col = SPRROW(x,0.,0.,0.,3.,3.,2.,2.,2., 2.,3.,3.,3.,3.,0.,0.,0.);\n\tif (y ==  9) col = SPRROW(x,0.,0.,0.,0.,0.,2.,2.,2., 2.,2.,2.,2.,0.,0.,0.,0.);\n\tif (y ==  8) col = SPRROW(x,0.,0.,0.,0.,3.,3.,1.,3., 3.,3.,0.,0.,0.,0.,0.,0.);\n\t\n\tif (y ==  7) col = SPRROW(x,0.,0.,0.,3.,3.,3.,3.,1., 1.,3.,3.,0.,0.,0.,0.,0.);\n\tif (y ==  6) col = SPRROW(x,0.,0.,0.,3.,3.,3.,1.,1., 2.,1.,1.,2.,0.,0.,0.,0.);\n\tif (y ==  5) col = SPRROW(x,0.,0.,0.,3.,3.,3.,3.,1., 1.,1.,1.,1.,0.,0.,0.,0.);\n\tif (y ==  4) col = SPRROW(x,0.,0.,0.,1.,3.,3.,2.,2., 2.,1.,1.,1.,0.,0.,0.,0.);\n\tif (y ==  3) col = SPRROW(x,0.,0.,0.,0.,1.,3.,2.,2., 1.,1.,1.,0.,0.,0.,0.,0.);\n\tif (y ==  2) col = SPRROW(x,0.,0.,0.,0.,0.,1.,1.,1., 3.,3.,3.,0.,0.,0.,0.,0.);\n\tif (y ==  1) col = SPRROW(x,0.,0.,0.,0.,0.,3.,3.,3., 3.,3.,3.,3.,0.,0.,0.,0.);\n\tif (y ==  0) col = SPRROW(x,0.,0.,0.,0.,0.,3.,3.,3., 3.,0.,0.,0.,0.,0.,0.,0.);\n\t\n\tcol = SELECT(mod(float(x),8.0),col);\n\tif (col == 0.0) return RGB(0,0,0);\n\tif (col == 1.0) return RGB(177,52,37);\n\tif (col == 2.0) return RGB(227,157,37);\n\tif (col == 3.0) return RGB(106,107,4);\n\treturn RGB(0,0,0);\n}\n\n\nvec4 sprMarioWalk1(int x, int y)\n{\n\tfloat col = 0.0;\n\tif (y == 15) col = SPRROW(x,0.,0.,0.,0.,0.,0.,0.,0., 0.,0.,0.,0.,0.,0.,0.,0.);\n\tif (y == 14) col = SPRROW(x,0.,0.,0.,0.,0.,0.,1.,1., 1.,1.,1.,0.,0.,0.,0.,0.);\n\tif (y == 13) col = SPRROW(x,0.,0.,0.,0.,0.,1.,1.,1., 1.,1.,1.,1.,1.,1.,0.,0.);\n\tif (y == 12) col = SPRROW(x,0.,0.,0.,0.,0.,3.,3.,3., 2.,2.,3.,2.,0.,0.,0.,0.);\n\tif (y == 11) col = SPRROW(x,0.,0.,0.,0.,3.,2.,3.,2., 2.,2.,3.,2.,2.,2.,0.,0.);\n\tif (y == 10) col = SPRROW(x,0.,0.,0.,0.,3.,2.,3.,3., 2.,2.,2.,3.,2.,2.,2.,0.);\n\tif (y ==  9) col = SPRROW(x,0.,0.,0.,0.,3.,3.,2.,2., 2.,2.,3.,3.,3.,3.,0.,0.);\n\tif (y ==  8) col = SPRROW(x,0.,0.,0.,0.,0.,0.,2.,2., 2.,2.,2.,2.,2.,0.,0.,0.);\n\t\n\tif (y ==  7) col = SPRROW(x,0.,0.,0.,0.,0.,3.,3.,3., 3.,1.,3.,0.,2.,0.,0.,0.);\n\tif (y ==  6) col = SPRROW(x,0.,0.,0.,0.,2.,3.,3.,3., 3.,3.,3.,2.,2.,2.,0.,0.);\n\tif (y ==  5) col = SPRROW(x,0.,0.,0.,2.,2.,1.,3.,3., 3.,3.,3.,2.,2.,0.,0.,0.);\n\tif (y ==  4) col = SPRROW(x,0.,0.,0.,3.,3.,1.,1.,1., 1.,1.,1.,1.,0.,0.,0.,0.);\n\tif (y ==  3) col = SPRROW(x,0.,0.,0.,3.,1.,1.,1.,1., 1.,1.,1.,1.,0.,0.,0.,0.);\n\tif (y ==  2) col = SPRROW(x,0.,0.,3.,3.,1.,1.,1.,0., 1.,1.,1.,0.,0.,0.,0.,0.);\n\tif (y ==  1) col = SPRROW(x,0.,0.,3.,0.,0.,0.,0.,3., 3.,3.,0.,0.,0.,0.,0.,0.);\n\tif (y ==  0) col = SPRROW(x,0.,0.,0.,0.,0.,0.,0.,3., 3.,3.,3.,0.,0.,0.,0.,0.);\n\t\n\tcol = SELECT(mod(float(x),8.0),col);\n\tif (col == 0.0) return RGB(0,0,0);\n\tif (col == 1.0) return RGB(177,52,37);\n\tif (col == 2.0) return RGB(227,157,37);\n\tif (col == 3.0) return RGB(106,107,4);\n\treturn RGB(0,0,0);\n}\n\nvec4 getTile(int t, int x, int y)\n{\n\tif (t == 0) return bg;\n\tif (t == 1) return sprGround(x,y);\n\tif (t == 2) return sprQuestionBlock(x,y);\n\tif (t == 3) return sprUsedBlock(x,y);\n\t\n\treturn bg;\n}\n\nint getSection(int s, int x, int y)\n{\n\tfloat col = 0.0;\n\tif (s == 0) {\n\t\tif (y == 6) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 5) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 4) col = SECROW(x,0.,0.,3.,3.,3.,0.,0.,0.);\n\t\tif (y == 3) col = SECROW(x,0.,0.,2.,2.,2.,0.,0.,0.);\n\t\tif (y == 2) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 1) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y <= 0) col = SECROW(x,1.,1.,1.,1.,1.,1.,1.,1.);\n\t}\n\tif (s == 1) {\n\t\tif (y == 6) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 5) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 4) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 3) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 2) col = SECROW(x,0.,0.,0.,0.,0.,1.,0.,0.);\n\t\tif (y == 1) col = SECROW(x,0.,0.,0.,1.,1.,1.,0.,0.);\n\t\tif (y <= 0) col = SECROW(x,1.,1.,1.,1.,1.,1.,1.,1.);\n\t}\n\tif (s == 2) {\n\t\tif (y == 6) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 5) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 4) col = SECROW(x,0.,0.,3.,0.,0.,3.,0.,0.);\n\t\tif (y == 3) col = SECROW(x,0.,0.,2.,0.,0.,2.,0.,0.);\n\t\tif (y == 2) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 1) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y <= 0) col = SECROW(x,1.,1.,1.,1.,1.,1.,1.,1.);\n\t}\n\tif (s == 3) {\n\t\tif (y == 6) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 5) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 4) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 3) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 2) col = SECROW(x,0.,0.,0.,1.,1.,0.,0.,0.);\n\t\tif (y == 1) col = SECROW(x,0.,0.,0.,1.,1.,1.,0.,0.);\n\t\tif (y <= 0) col = SECROW(x,1.,1.,1.,1.,1.,1.,1.,1.);\n\t}\n\tif (s == 4) {\n\t\tif (y == 6) col = SECROW(x,0.,0.,0.,0.,3.,0.,0.,0.);\n\t\tif (y == 5) col = SECROW(x,0.,0.,0.,0.,2.,0.,0.,0.);\n\t\tif (y == 4) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 3) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 2) col = SECROW(x,0.,0.,0.,1.,1.,1.,0.,0.);\n\t\tif (y == 1) col = SECROW(x,0.,0.,0.,1.,1.,1.,0.,0.);\n\t\tif (y <= 0) col = SECROW(x,1.,1.,1.,1.,1.,1.,1.,1.);\n\t}\n\tif (s == 5) {\n\t\tif (y == 6) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 5) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 4) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 3) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 2) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y == 1) col = SECROW(x,0.,0.,0.,0.,0.,0.,0.,0.);\n\t\tif (y <= 0) col = SECROW(x,1.,1.,1.,0.,0.,1.,1.,1.);\n\t}\n\t\n\t\n\t\n\treturn int(SELECTSEC(mod(float(x),4.0),col));\n}\n\nint getBlock(int x, int y)\n{\n#ifdef TOTALLY_RANDOM_LEVEL\n\tint height = 1 + int(rand(vec2(int(float(x) / 3.0),2.3)) * 3.0);\n\treturn (y < height ? 1 : 0);\n#else\n\tif (y > 6) return 0;\n\t\n\tint section = int(rand(vec2(int(float(x) / 8.0),3.0)) * 6.0);\n\tint sectionX = int(mod(float(x), 8.0));\n\t\n\treturn getSection(section,sectionX,y - int(rand(vec2(section,2.0)) * 0.0));\n#endif\n}\n\nbool isSolid(int b)\n{\n\treturn (b != 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst float gameSpeed = 60.0;\n\t\n\t// Get the current game pixel\n\t// (Each game pixel is two screen pixels)\n\t//  (or four, if the screen is larger)\n\tfloat x = fragCoord.x / 2.0;\n\tfloat y = fragCoord.y / 2.0;\n\tif (iResolution.y >= 640.0) {\n\t\tx /= 2.0;\n\t\ty /= 2.0;\n\t}\n\tif (iResolution.y < 200.0) {\n\t\tx *= 2.0;\n\t\ty *= 2.0;\n\t}\n\t\n\t// Just move the screen up for half a block's size\n\ty -= 8.0;\n\n\t// Get the grid index of the block at this pixel,\n\t// and of the block at the screen's leftmost position\n\tint firstBlockX = int((iTime * gameSpeed) / 16.0);\n\tint blockX = int((x + iTime * gameSpeed) / 16.0);\n\tint blockY = int(y / 16.0);\n\t\n\t// Ask for the block ID that exists in the current position\n\tint block = getBlock(blockX,blockY);\n\t\n\t// Get the fractional position inside current block\n\tint subx = int(mod((x + iTime * gameSpeed),16.0));\n\tint suby = int(mod(y,16.0));\n\t\n\t// Animate block if it's a Question Block\n\tif (block == 2) {\n\t\tif (blockX - firstBlockX == 5) {\n\t\t\tsuby -= int(max(0.0,(sin(mod((iTime * gameSpeed / 16.0),1.0) * 3.141592 * 1.5) * 8.0)));\n\t\t}\n\t\t\n\t\tif ((floor((x + iTime * gameSpeed) / 16.0) - (iTime * gameSpeed) / 16.0) < 4.25) block = 3;\n\t// Animate block if it's on top of a Question Block\n\t} else if (block == 3) {\n\t\tblock = 2;\n\t\tsuby += 16;\n\t\tif (blockX - firstBlockX == 5) {\n\t\t\tsuby -= int(max(0.0,(sin(mod((iTime * gameSpeed / 16.0),1.0) * 3.141592 * 1.5) * 8.0)));\n\t\t}\n\t}\n\t// Get the final color for this pixel\n\t// (Mario can override this later on)\n\tfragColor = getTile(block,subx,suby);\n\t\n\t\n\t// If this is the column where Mario stops simulating...\n\t// (it's the only column he can appear in)\n\tif (x >= endX && x < endX + 16.0) {\n\t\t\n\t\t// Screen position in pixels:\n\t\t// Every block is 16 pixels wide\n\t\tfloat screenX = iTime * gameSpeed;\n\t\t\n\t\t// Mario's starting position and speed\n\t\tfloat marioX = screenX + startX;\n\t\tfloat marioY = 16.0;\n\t\tfloat marioXSpd = 4.0;\n\t\tfloat marioYSpd = 0.0;\n\t\t\n\t\t// Find out the first empty block in this column,\n\t\t// starting from the bottom, as to put Mario on top of it\n\t\tfor(int i = 1; i < 4; i++) {\n\t\t\tif (!isSolid(getBlock(int(marioX / 16.0), i))) {\n\t\t\t\tmarioY = float(i) * 16.0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Number of steps to simulate;\n\t\t// We'll simulate at 15 FPS and interpolate later,\n\t\t// hence the division by 4.0\n\t\t// (Mario should actually be walking 1 pixel every 1/60th of a second,\n\t\t//  but he'll be walking 4 pixels every 1/15th)\n\t\tconst int simSteps = int((endX - startX) / 4.0);\n\t\t\n\t\t// Previous position, as to interpolate later, for high frame rates\n\t\tfloat lastX = 0.0;\n\t\tfloat lastY = 0.0;\n\t\t\n\t\t// Start simulating\n\t\tbool onGround = false;\n\t\tfor(int sim = 0; sim < simSteps; sim++) {\n\t\t\t// Store the previous position\n\t\t\tlastX = marioX;\n\t\t\tlastY = marioY;\n\t\t\t\n\t\t\t// If Mario is inside a block, move him up\n\t\t\t// (This happens only at the start of the simulation,\n\t\t\t//  somepyvisualTimes because he is heads-up with a wall and\n\t\t\t//  cannot make a jump properly)\n\t\t\tonGround = false;\n\t\t\tif (isSolid(getBlock(int(marioX / 16.0) + 1, int(marioY / 16.0)))) {\n\t\t\t\tmarioY = (floor(marioY / 16.0) * 16.0) + 16.0;\n\t\t\t}\n\t\t\t\n\t\t\t// Next, pretty standard platforming code\n\t\t\t\n\t\t\t// Apply gravity and move in the Y-axis\n\t\t\tmarioYSpd -= 2.5;\n\t\t\tmarioY += marioYSpd;\n\t\t\t\n\t\t\t// If he is going up,\n\t\t\t// and if there is a block above him,\n\t\t\t// align him with the grid (as to avoid getting inside the block),\n\t\t\t// and invert his YSpeed, as to fall quickly (because he bounced his head)\n\t\t\tif (marioYSpd > 0.0) {\n\t\t\t\tif (isSolid(getBlock(int(floor((marioX + 12.0) / 16.0)), int(floor((marioY + 15.9) / 16.0))))) {\n\t\t\t\t\tmarioYSpd *= -0.5;\n\t\t\t\t\tmarioY = (floor(marioY / 16.0) * 16.0);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// If he is going down,\n\t\t\t// and if there is a block beneath him,\n\t\t\t// align him with the grid (as to land properly on top of the block),\n\t\t\t// and mark him as onGround (to be able to perform a jump)\n\t\t\tif (marioYSpd < 0.0) {\n\t\t\t\tif (isSolid(getBlock(int(floor((marioX) / 16.0)), int(floor(marioY / 16.0)))) ||\n\t\t\t\t\tisSolid(getBlock(int(floor((marioX + 15.9) / 16.0)), int(floor(marioY / 16.0))))) {\n\t\t\t\t\tmarioYSpd = 0.0;\n\t\t\t\t\tmarioY = (floor(marioY / 16.0) * 16.0) + 16.0;\n\t\t\t\t\tonGround = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Finally, move him in the X-axis\n\t\t\t// I assume here he'll never hit a block horizontally\n\t\t\tmarioX += marioXSpd;\n\t\t\t\n\t\t\t// Now, if he's onGround,\n\t\t\t// and if there are blocks in front of him,\n\t\t\t// or if there is a pit right next to him,\n\t\t\t// set his YSpeed to jump\n\t\t\tif (onGround) {\n\t\t\t\tif (!isSolid(getBlock(int((marioX) / 16.0) + 1,0))) {\n\t\t\t\t\tmarioYSpd = 15.5;\n\t\t\t\t} else if (isSolid(getBlock(int((marioX + 36.0) / 16.0), int((marioY + 24.0) / 16.0)))) {\n\t\t\t\t\tmarioYSpd = 15.5;\n\t\t\t\t} else if (isSolid(getBlock(int((marioX) / 16.0) + 2, int((marioY + 8.0) / 16.0)))) {\n\t\t\t\t\tmarioYSpd = 12.5;\n\t\t\t\t} else if (getBlock(int((marioX) / 16.0) + 1, int((marioY + 8.0) / 16.0) + 2) == 2) {\n\t\t\t\t\tmarioYSpd = 15.5;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Interpolate Y-pos for smooth high-frame-rate movement\n\t\tmarioY = mix(lastY,marioY,mod(iTime * 15.0,1.0)) - 1.0;\n\t\t\n\t\t// Finally, if he appears at this row, fetch a pixel from his sprites\n\t\tif (y >= marioY && y < marioY + 16.0) {\n\t\t\tvec4 spr = vec4(0,0,0,0);\n\t\t\tif (onGround) {\n\t\t\t\t// Which frame?\n\t\t\t\tint f = int(mod(iTime * 10.0, 3.0));\n\t\t\t\tif (f == 0) spr = sprMarioWalk1(int(x - (marioX - screenX)),int(y - marioY));\n\t\t\t\tif (f == 1) spr = sprMarioWalk2(int(x - (marioX - screenX)),int(y - marioY));\n\t\t\t\tif (f == 2) spr = sprMarioWalk3(int(x - (marioX - screenX)),int(y - marioY));\n\t\t\t} else {\n\t\t\t\tspr = sprMarioJump(int(x - (marioX - screenX)),int(y - marioY));\n\t\t\t}\n\t\t\t// Transparency check\n\t\t\tif (spr.x != 0.0) fragColor = spr;\n\t\t}\n\t}\n}\n// --------[ Original ShaderToy ends here ]---------- //\n\n#undef pyvisualTime\n#undef pyvisualResolution\n\n\n\nvoid generateFrag() {\n\n\n  iResolution = vec3(pyvisualResolution, 0.0);\n  iTime = pyvisualTime;\n\n  mainImage(pyvisualOutColor, (vec2(pyvisualUV.x, 1.0 - pyvisualUV.y) * pyvisualResolution).xy);\n}\n", "i_id": "45233.0", "i_input": "", "i_interpolation": 1.0, "i_sizeref": "", "i_time": 157.94449821782942, "i_time_d0": 0.0, "i_time_d1": 0.0, "i_time_mask": "", "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_wrapping": 1.0, "o_enabled": 1.0, "o_output": ""}, "state": {}, "type": "GLSLSandbox", "ui_data": {"collapsed": false, "pos": [1923.0, 240.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 1, "manual_values": {"i_texture": ""}, "state": {}, "type": "Renderer", "ui_data": {"collapsed": false, "pos": [3876.0, -168.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 2, "manual_values": {"i_name": "ref_lowres", "o_output": ""}, "state": {}, "type": "GetTextureVar", "ui_data": {"collapsed": true, "pos": [1557.0, 403.0], "selected": false}}, {"custom_ports": [["i_time", {"default": null, "dtype": "float", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "time", "widgets": []}], ["i_time_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "time_mask", "widgets": []}], ["i_time_d0", {"default": null, "dtype": "float", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "time_d0", "widgets": []}], ["i_time_d1", {"default": null, "dtype": "float", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "time_d1", "widgets": []}], ["i_mouse", {"default": null, "dtype": "vec2", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "mouse", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 3, "manual_values": {"i_enable_time_mask": 0.0, "i_enabled": 1.0, "i_fragment_source": "\n#include <generate/base_time_mask.frag>\n// Shader downloaded and adapted from glslsandbox.com\n// URL: http://glslsandbox.com/e#41115.0\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n \n \n\nuniform vec2 mouse;\n;\n\n\n\n// was 14 originally\n#define iterations 10\n#define formuparam2 0.79\n \n#define volsteps 5\n#define stepsize 0.290\n \n#define zoom 0.900\n#define tile   0.850\n#define speed2  0.10\n \n#define brightness 0.103\n#define darkmatter 0.400\n#define distfading 0.160\n#define saturation 0.800\n\n\n#define transverseSpeed zoom*2.0\n#define cloud 0.11 \n\n \nfloat triangle(float x, float a) { \n\tfloat output2 = 2.0*abs(  2.0*  ( (x/a) - floor( (x/a) + 0.5) ) ) - 1.0;\n\treturn output2;\n}\n \nfloat field(in vec3 p) {\t\n\tfloat strength = 7. + .03 * log(1.e-6 + fract(sin(pyvisualTime) * 4373.11));\n\tfloat accum = 0.;\n\tfloat prev = 0.;\n\tfloat tw = 0.;\t\n\n\tfor (int i = 0; i < 6; ++i) {\n\t\tfloat mag = dot(p, p);\n\t\tp = abs(p) / mag + vec3(-.5, -.8 + 0.1*sin(pyvisualTime*0.7 + 2.0), -1.1+0.3*cos(pyvisualTime*0.3));\n\t\tfloat w = exp(-float(i) / 7.);\n\t\taccum += w * exp(-strength * pow(abs(mag - prev), 2.3));\n\t\ttw += w;\n\t\tprev = mag;\n\t}\n\treturn max(0., 5. * accum / tw - .7);\n}\n\n\n\n\n\nvoid generateFrag() {\n\n   \n     \tvec2 uv2 = 2. * (vec2(pyvisualUV.x, 1.0 - pyvisualUV.y) * pyvisualResolution).xy / vec2(512) - 1.;\n\tvec2 uvs = uv2 * vec2(512)  / 512.;\n\t\n\tfloat pyvisualTime2 = pyvisualTime;               \n        float speed = speed2;\n        speed = .01 * cos(pyvisualTime2*0.02 + 3.1415926/4.0);          \n\t//speed = 0.0;\t\n    \tfloat formuparam = formuparam2;\n\t\n    \t//get coords and direction\t\n\tvec2 uv = uvs;\t\t       \n\t//mouse rotation\n\tfloat a_xz = 0.9;\n\tfloat a_yz = -.6;\n\tfloat a_xy = 0.9 + pyvisualTime*0.08;\t\n\t\n\tmat2 rot_xz = mat2(cos(a_xz),sin(a_xz),-sin(a_xz),cos(a_xz));\t\n\tmat2 rot_yz = mat2(cos(a_yz),sin(a_yz),-sin(a_yz),cos(a_yz));\t\t\n\tmat2 rot_xy = mat2(cos(a_xy),sin(a_xy),-sin(a_xy),cos(a_xy));\n\t\n\n\tfloat v2 =1.0;\t\n\tvec3 dir=vec3(uv*zoom,1.); \n\tvec3 from=vec3(0.0, 0.0,0.0);                               \n        from.x -= 5.0*(mouse.x-0.5);\n        from.y -= 5.0*(mouse.y-0.5);\n               \n               \n\tvec3 forward = vec3(0.,0.,1.);   \n\tfrom.x += transverseSpeed*(1.0)*cos(0.01*pyvisualTime) + 0.001*pyvisualTime;\n\tfrom.y += transverseSpeed*(1.0)*sin(0.01*pyvisualTime) +0.001*pyvisualTime;\n\tfrom.z += 0.003*pyvisualTime;\t\n\t\n\tdir.xy*=rot_xy;\n\tforward.xy *= rot_xy;\n\tdir.xz*=rot_xz;\n\tforward.xz *= rot_xz;\t\n\tdir.yz*= rot_yz;\n\tforward.yz *= rot_yz;\n\t\n\tfrom.xy*=-rot_xy;\n\tfrom.xz*=rot_xz;\n\tfrom.yz*= rot_yz;\n\t \n\t\n\t//zoom\n\tfloat zooom = (pyvisualTime2-3311.)*speed;\n\tfrom += forward* zooom;\n\tfloat sampleShift = mod( zooom, stepsize );\n\t \n\tfloat zoffset = -sampleShift;\n\tsampleShift /= stepsize; // make from 0 to 1\n\t\n\t//volumetric rendering\n\tfloat s=0.24;\n\tfloat s3 = s + stepsize/2.0;\n\tvec3 v=vec3(0.);\n\tfloat t3 = 0.0;\t\n\t\n\tvec3 backCol2 = vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p2=from+(s+zoffset)*dir;// + vec3(0.,0.,zoffset);\n\t\tvec3 p3=from+(s3+zoffset)*dir;// + vec3(0.,0.,zoffset);\n\t\t\n\t\tp2 = abs(vec3(tile)-mod(p2,vec3(tile*2.))); // tiling fold\n\t\tp3 = abs(vec3(tile)-mod(p3,vec3(tile*2.))); // tiling fold\t\t\n\t\t\n#ifdef cloud\n\t\tt3 = field(p3);\n#endif\n\t\t\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) {\n\t\t\tp2=abs(p2)/dot(p2,p2)-formuparam; // the magic formula\n\t\t\t//p=abs(p)/max(dot(p,p),0.005)-formuparam; // another interesting way to reduce noise\n\t\t\tfloat D = abs(length(p2)-pa); // absolute sum of average change\n\t\t\ta += i > 7 ? min( 12., D) : D;\n\t\t\tpa=length(p2);\n\t\t}\n\t\t\n\t\t\n\t\t//float dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\t//if (r>3) fade*=1.-dm; // dark matter, don't render near\n\t\t// brightens stuff up a bit\n\t\tfloat s1 = s+zoffset;\n\t\t// need closed form expression for this, now that we shift samples\n\t\tfloat fade = pow(distfading,max(0.,float(r)-sampleShift));\t\t\n\t\t//t3 += fade;\t\t\n\t\tv+=fade;\n\t       \t//backCol2 -= fade;\n\n\t\t// fade out samples as they approach the camera\n\t\tif( r == 0 )\n\t\t\tfade *= (1. - (sampleShift));\n\t\t// fade in samples as they approach from the distance\n\t\tif( r == volsteps-1 )\n\t\t\tfade *= sampleShift;\n\t\tv+=vec3(s1,s1*s1,s1*s1*s1*s1)*a*brightness*fade; // coloring based on distance\n\t\t\n\t\tbackCol2 += mix(.4, 1., v2) * vec3(1.8 * t3 * t3 * t3, 1.4 * t3 * t3, t3) * fade;\n\n\t\t\n\t\ts+=stepsize;\n\t\ts3 += stepsize;\t\t\n\t}//\u0444\u043e\u0440\n\t\t       \n\tv=mix(vec3(length(v)),v,saturation); //color adjust\t\n\n\tvec4 forCol2 = vec4(v*.01,1.);\t\n\t#ifdef cloud\n\tbackCol2 *= cloud;\n\t#endif\t\n\tbackCol2.b *= 1.8;\n\tbackCol2.r *= 0.05;\t\n\t\n\tbackCol2.b = 0.5*mix(backCol2.g, backCol2.b, 0.8);\n\tbackCol2.g = 0.0;\n\tbackCol2.bg = mix(backCol2.gb, backCol2.bg, 0.5*(cos(pyvisualTime*0.01) + 1.0));\t\n\tpyvisualOutColor = forCol2 + vec4(backCol2, 1.0);\n}\n", "i_id": "45233.0", "i_input": "", "i_interpolation": 1.0, "i_mouse": [0.0, 0.0], "i_sizeref": "", "i_time": 0.0, "i_time_d0": 0.0, "i_time_d1": 0.0, "i_time_mask": "", "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_wrapping": 1.0, "o_enabled": 1.0, "o_output": ""}, "state": {}, "type": "GLSLSandbox", "ui_data": {"collapsed": false, "pos": [2008.0, -86.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 4, "manual_values": {"i_input0": "", "i_input1": "", "i_input2": "", "i_input3": "", "o_output": ""}, "state": {}, "type": "Blend", "ui_data": {"collapsed": false, "pos": [2250.0, 129.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 5, "manual_values": {"i_t1": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_t2": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "o_output": [[0.06986893713474274, 0.004281554836779833, 0.0, 0.0], [-0.004281554836779833, 0.06986893713474274, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]}, "state": {}, "type": "Dot", "ui_data": {"collapsed": false, "pos": [1798.0, -90.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 6, "manual_values": {"i_input": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_uniform": 1.0, "i_x": 0.07000000029802322, "i_y": 0.07000000029802322, "o_output": [[0.07000000029802322, 0.0, 0.0, 0.0], [0.0, 0.07000000029802322, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]}, "state": {}, "type": "Scale", "ui_data": {"collapsed": false, "pos": [1516.0, -136.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 7, "manual_values": {"i_input": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_x": -3.0199999809265137, "i_y": 0.0, "o_output": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [-3.0199999809265137, 4870.296875, 0.0, 1.0]]}, "state": {}, "type": "Translate", "ui_data": {"collapsed": false, "pos": [1587.0, -7.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 8, "manual_values": {"i_name": "ref_lowres", "o_output": ""}, "state": {}, "type": "GetTextureVar", "ui_data": {"collapsed": true, "pos": [1775.0, -162.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 9, "manual_values": {"i_enabled": 1.0, "i_factor": 0.5, "i_mod": 0.0, "i_reset": 0.0, "o_output": 4870.2967928647995}, "state": {"time": 4870.2967928647995}, "type": "Time", "ui_data": {"collapsed": false, "pos": [1340.0, 6.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 10, "manual_values": {"i_t1": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_t2": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "o_output": [[0.06986893713474274, 0.004281554836779833, 0.0, 0.0], [-0.004281554836779833, 0.06986893713474274, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [-3.0199999809265137, 4870.296875, 0.0, 1.0]]}, "state": {}, "type": "Dot", "ui_data": {"collapsed": false, "pos": [1845.0, 21.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 11, "manual_values": {"i_input": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_theta": 7.480000019073486, "o_output": [[0.9981276392936707, 0.06116507202386856, 0.0, 0.0], [-0.06116507202386856, 0.9981276392936707, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]}, "state": {}, "type": "Rotate", "ui_data": {"collapsed": false, "pos": [1620.0, 161.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 12, "manual_values": {"i_enabled": 1.0, "i_factor": 1.2200000286102295, "i_mod": 0.0, "i_reset": 0.0, "o_output": 11883.506689216969}, "state": {"time": 11883.506689216969}, "type": "Time", "ui_data": {"collapsed": false, "pos": [1311.0, 183.0], "selected": false}}, {"custom_ports": [["i_dMaskRGB", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dMaskRGB", "widgets": []}], ["i_filter_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_mask", "widgets": []}], ["i_mask_factor", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_factor", "widgets": []}], ["i_mask_invert", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_invert", "widgets": []}], ["i_filter_mode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["input", "mask", "filtered", "input_filtered_masked", "input_masked", "filtered_masked"], "default": 3.0}, "dummy": false, "group": "additional", "hide": true, "manual_input": true, "name": "filter_mode", "widgets": []}], ["i_filter_bg", {"default": null, "dtype": "color", "dtype_args": {"default": [0.0, 0.0, 0.0, 0.0]}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_bg", "widgets": []}], ["i_uPreTransform", {"default": null, "dtype": "mat4", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uPreTransform", "widgets": []}], ["i_uCount", {"default": null, "dtype": "int", "dtype_args": {"default": 2.0, "range": [1, Infinity]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uCount", "widgets": []}], ["i_uMode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["vertical", "horizontal"]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uMode", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 13, "manual_values": {"i_advanced_filtering": 0.0, "i_dMaskRGB": 0.0, "i_enabled": 1.0, "i_filter_bg": [0.0, 0.0, 0.0, 0.0], "i_filter_mask": "", "i_filter_mode": 3.0, "i_input": "", "i_interpolation": 1.0, "i_mask_factor": 1.0, "i_mask_invert": 0.0, "i_sizeref": "", "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_uCount": 2.0, "i_uMode": 0.0, "i_uPreTransform": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_wrapping": 1.0, "o_enabled": 1.0, "o_output": ""}, "state": {}, "type": "Tile", "ui_data": {"collapsed": false, "pos": [2523.0, 33.0], "selected": false}}, {"custom_ports": [["i_dMaskRGB", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dMaskRGB", "widgets": []}], ["i_filter_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_mask", "widgets": []}], ["i_mask_factor", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_factor", "widgets": []}], ["i_mask_invert", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_invert", "widgets": []}], ["i_filter_mode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["input", "mask", "filtered", "input_filtered_masked", "input_masked", "filtered_masked"], "default": 3.0}, "dummy": false, "group": "additional", "hide": true, "manual_input": true, "name": "filter_mode", "widgets": []}], ["i_filter_bg", {"default": null, "dtype": "color", "dtype_args": {"default": [0.0, 0.0, 0.0, 0.0]}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_bg", "widgets": []}], ["i_uPreTransform", {"default": null, "dtype": "mat4", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uPreTransform", "widgets": []}], ["i_uMask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uMask", "widgets": []}], ["i_uMaskFactor", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0, "range": [0.0, Infinity]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uMaskFactor", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 14, "manual_values": {"i_advanced_filtering": 0.0, "i_dMaskRGB": 0.0, "i_enabled": 1.0, "i_filter_bg": [0.0, 0.0, 0.0, 0.0], "i_filter_mask": "", "i_filter_mode": 3.0, "i_input": "", "i_interpolation": 1.0, "i_mask_factor": 1.0, "i_mask_invert": 0.0, "i_sizeref": "", "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_uMask": "", "i_uMaskFactor": 1.0, "i_uPreTransform": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_wrapping": 1.0, "o_enabled": 1.0, "o_output": ""}, "state": {}, "type": "MaskTexture", "ui_data": {"collapsed": false, "pos": [3386.0, -116.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 15, "manual_values": {"i_name": "m_main", "o_output": ""}, "state": {}, "type": "GetTextureVar", "ui_data": {"collapsed": true, "pos": [3186.0, 69.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 16, "manual_values": {"i_input0": "", "i_input1": "", "i_input2": "", "i_input3": "", "o_output": ""}, "state": {}, "type": "Blend", "ui_data": {"collapsed": false, "pos": [3701.0, -23.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 17, "manual_values": {"i_name": "m_boxes", "o_output": ""}, "state": {}, "type": "GetTextureVar", "ui_data": {"collapsed": true, "pos": [3059.0, 272.0], "selected": false}}, {"custom_ports": [["i_dMaskRGB", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dMaskRGB", "widgets": []}], ["i_filter_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_mask", "widgets": []}], ["i_mask_factor", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_factor", "widgets": []}], ["i_mask_invert", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_invert", "widgets": []}], ["i_filter_mode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["input", "mask", "filtered", "input_filtered_masked", "input_masked", "filtered_masked"], "default": 3.0}, "dummy": false, "group": "additional", "hide": true, "manual_input": true, "name": "filter_mode", "widgets": []}], ["i_filter_bg", {"default": null, "dtype": "color", "dtype_args": {"default": [0.0, 0.0, 0.0, 0.0]}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_bg", "widgets": []}], ["i_uMode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["difference", "overlay", "grain merge", "exclusion", "hsv hue", "hsv saturation", "hsv value", "multiply", "multiply for mask"]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uMode", "widgets": []}], ["i_uFactorLeft", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0, "range": [0.0, 1.0]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uFactorLeft", "widgets": []}], ["i_uFactorRight", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0, "range": [0.0, 1.0]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uFactorRight", "widgets": []}], ["i_uColor", {"default": null, "dtype": "color", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uColor", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 18, "manual_values": {"i_advanced_filtering": 0.0, "i_dMaskRGB": 0.0, "i_enabled": 1.0, "i_filter_bg": [0.0, 0.0, 0.0, 0.0], "i_filter_mask": "", "i_filter_mode": 3.0, "i_input": "", "i_interpolation": 1.0, "i_mask_factor": 1.0, "i_mask_invert": 0.0, "i_sizeref": "", "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_uColor": [1.0, 0.9999899864196777, 0.9999899864196777, 1.0], "i_uFactorLeft": 1.0, "i_uFactorRight": 1.0, "i_uMode": 8.0, "i_wrapping": 1.0, "o_enabled": 1.0, "o_output": ""}, "state": {}, "type": "OverlayColorLR", "ui_data": {"collapsed": false, "pos": [3349.0, 192.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 19, "manual_values": {"i_name": "value_l", "o_output": 1.0}, "state": {}, "type": "GetFloatVar", "ui_data": {"collapsed": true, "pos": [3099.0, 325.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 20, "manual_values": {"i_name": "value_r", "o_output": 1.0}, "state": {}, "type": "GetFloatVar", "ui_data": {"collapsed": true, "pos": [3108.0, 357.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 21, "manual_values": {"i_a": 0.10000000149011612, "i_alpha0": 0.0, "i_alpha1": 1.0, "i_b": 0.4000000059604645, "i_name": "beat_running", "o_output": 0.10000000149011612}, "state": {}, "type": "MixFloatVar", "ui_data": {"collapsed": false, "pos": [956.0, 494.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 22, "manual_values": {"i_cutoff": 0.4399999976158142, "i_enabled": 1.0, "i_ignore_threshold": Infinity, "i_input": 0.0, "i_order": 2.0, "o_output": 0.10000000149011762}, "state": {}, "type": "LowpassFloat", "ui_data": {"collapsed": false, "pos": [1227.0, 468.0], "selected": false}}, {"custom_ports": [["i_enabled", {"default": null, "dtype": "bool", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "enabled", "widgets": []}], ["i_n", {"default": null, "dtype": "int", "dtype_args": {"default": 4.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "n", "widgets": []}], ["i_offset", {"default": null, "dtype": "int", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "offset", "widgets": []}], ["i_p", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "p", "widgets": []}], ["i_reset_p", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "reset_p", "widgets": []}], ["o_event", {"default": null, "dtype": "event", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "event", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 23, "manual_values": {"i_enabled": 1.0, "i_evaluate_sometimes": 0.0, "i_module_enabled": 1.0, "i_module_name": "", "i_n": 4.0, "i_offset": 0.0, "i_p": 1.0, "i_reset_p": 1.0, "o_dummy": 0.0, "o_event": 0.0}, "state": {}, "type": "EveryNBeat", "ui_data": {"collapsed": false, "pos": [1110.0, 684.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 24, "manual_values": {"i_event": 0.0, "i_global_speed": 1.0, "i_jump_amount": 0.25, "i_jump_smooth": 0.0, "i_jump_type": 0.0, "i_speed0": 1.0, "i_speed1": 1.0, "i_timer_duration": 1.0, "i_timer_max": 1.0, "i_timer_min": 0.0, "i_timer_type": 0.0, "o_jump": 0.0, "o_jump_amount": 0.25, "o_speed": 0.10000000149011762, "o_value": 2518.6545236090546, "o_value_no_jumps": 2460.6545236090546}, "state": {"dir": 0, "time": 2460.6545236090546, "time_offset": 58.0}, "type": "MoveAndJump", "ui_data": {"collapsed": false, "pos": [1520.0, 642.0], "selected": false}}, {"custom_ports": [["i_dMaskRGB", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dMaskRGB", "widgets": []}], ["i_filter_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_mask", "widgets": []}], ["i_mask_factor", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_factor", "widgets": []}], ["i_mask_invert", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_invert", "widgets": []}], ["i_filter_mode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["input", "mask", "filtered", "input_filtered_masked", "input_masked", "filtered_masked"], "default": 3.0}, "dummy": false, "group": "additional", "hide": true, "manual_input": true, "name": "filter_mode", "widgets": []}], ["i_filter_bg", {"default": null, "dtype": "color", "dtype_args": {"default": [0.0, 0.0, 0.0, 0.0]}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_bg", "widgets": []}], ["i_uPreTransform", {"default": null, "dtype": "mat4", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uPreTransform", "widgets": []}], ["i_uMode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["passthrough", "vertical", "horizontal", "vertical and horizontal", "double vertical", "double horizontal"], "default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uMode", "widgets": []}], ["i_uInvertVertical", {"default": null, "dtype": "bool", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uInvertVertical", "widgets": []}], ["i_uInvertHorizontal", {"default": null, "dtype": "bool", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uInvertHorizontal", "widgets": []}], ["i_uDoubleCenter", {"default": null, "dtype": "float", "dtype_args": {"default": 0.2, "range": [0.0, 0.5]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uDoubleCenter", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 25, "manual_values": {"i_advanced_filtering": 0.0, "i_dMaskRGB": 0.0, "i_enabled": 1.0, "i_filter_bg": [0.0, 0.0, 0.0, 0.0], "i_filter_mask": "", "i_filter_mode": 3.0, "i_input": "", "i_interpolation": 1.0, "i_mask_factor": 1.0, "i_mask_invert": 0.0, "i_sizeref": "", "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_uDoubleCenter": 0.2, "i_uInvertHorizontal": 0.0, "i_uInvertVertical": 1.0, "i_uMode": 1.0, "i_uPreTransform": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_wrapping": 1.0, "o_enabled": 1.0, "o_output": ""}, "state": {}, "type": "Mirror", "ui_data": {"collapsed": false, "pos": [2851.0, -76.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 26, "manual_values": {"i_input": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_uniform": 1.0, "i_x": 0.6299999952316284, "i_y": 0.6299999952316284, "o_output": [[0.6299999952316284, 0.0, 0.0, 0.0], [0.0, 0.6299999952316284, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]}, "state": {}, "type": "Scale", "ui_data": {"collapsed": false, "pos": [1147.0, 307.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 27, "manual_values": {"i_input": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_x": -408.0, "i_y": 224.25, "o_output": [[0.6299999952316284, 0.0, 0.0, 0.0], [0.0, 0.6299999952316284, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [-257.0400085449219, 141.27749633789062, 0.0, 1.0]]}, "state": {}, "type": "Translate", "ui_data": {"collapsed": false, "pos": [1463.0, 299.0], "selected": false}}, {"custom_ports": [["i_dMaskRGB", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dMaskRGB", "widgets": []}], ["i_dWithAlpha", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dWithAlpha", "widgets": []}], ["i_filter_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_mask", "widgets": []}], ["i_mask_factor", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_factor", "widgets": []}], ["i_mask_invert", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_invert", "widgets": []}], ["i_filter_mode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["input", "mask", "filtered", "input_filtered_masked", "input_masked", "filtered_masked"], "default": 3.0}, "dummy": false, "group": "additional", "hide": true, "manual_input": true, "name": "filter_mode", "widgets": []}], ["i_filter_bg", {"default": null, "dtype": "color", "dtype_args": {"default": [0.0, 0.0, 0.0, 0.0]}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_bg", "widgets": []}], ["i_uStep", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0, "range": [0.0, Infinity]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uStep", "widgets": []}], ["i_uAlphaIntensity", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0, "range": [0.0, Infinity]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uAlphaIntensity", "widgets": []}], ["i_uColor", {"default": null, "dtype": "color", "dtype_args": {"default": [1.0, 1.0, 1.0, 1.0]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uColor", "widgets": []}], ["i_uDirection", {"default": null, "dtype": "int", "dtype_args": {"choices": ["x and y", "x", "y"], "default": 0.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uDirection", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 28, "manual_values": {"i_advanced_filtering": 0.0, "i_dMaskRGB": 0.0, "i_dWithAlpha": 0.0, "i_enabled": 1.0, "i_filter_bg": [0.0, 0.0, 0.0, 0.0], "i_filter_mask": "", "i_filter_mode": 3.0, "i_input": "", "i_interpolation": 1.0, "i_mask_factor": 1.0, "i_mask_invert": 0.0, "i_sizeref": "", "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_uAlphaIntensity": 1.0, "i_uColor": [1.0, 1.0, 1.0, 1.0], "i_uDirection": 2.0, "i_uStep": 1.0, "i_wrapping": 1.0, "o_enabled": 1.0, "o_output": ""}, "state": {}, "type": "Sobel", "ui_data": {"collapsed": false, "pos": [1969.0, 520.0], "selected": false}}, {"custom_ports": [["i_dMaskRGB", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dMaskRGB", "widgets": []}], ["i_dKernelRadius", {"default": null, "dtype": "int", "dtype_args": {"default": 3.0, "range": [1, Infinity]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "dKernelRadius", "widgets": []}], ["i_filter_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_mask", "widgets": []}], ["i_mask_factor", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_factor", "widgets": []}], ["i_mask_invert", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_invert", "widgets": []}], ["i_filter_mode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["input", "mask", "filtered", "input_filtered_masked", "input_masked", "filtered_masked"], "default": 3.0}, "dummy": false, "group": "additional", "hide": true, "manual_input": true, "name": "filter_mode", "widgets": []}], ["i_filter_bg", {"default": null, "dtype": "color", "dtype_args": {"default": [0.0, 0.0, 0.0, 0.0]}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_bg", "widgets": []}], ["i_uSigma", {"default": null, "dtype": "float", "dtype_args": {"default": 3.0, "range": [0.0001, Infinity]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uSigma", "widgets": []}], ["i_uDirection", {"default": null, "dtype": "vec2", "dtype_args": {"default": [1.0, 0.0]}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uDirection", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 29, "manual_values": {"i_advanced_filtering": 0.0, "i_dKernelRadius": 3.0, "i_dMaskRGB": 0.0, "i_enabled": 1.0, "i_filter_bg": [0.0, 0.0, 0.0, 0.0], "i_filter_mask": "", "i_filter_mode": 3.0, "i_input": "", "i_interpolation": 1.0, "i_mask_factor": 1.0, "i_mask_invert": 0.0, "i_sizeref": "", "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_uDirection": [0.0, 4.0], "i_uSigma": 3.0, "i_wrapping": 1.0, "o_enabled": 1.0, "o_output": ""}, "state": {}, "type": "GaussBlurPass", "ui_data": {"collapsed": false, "pos": [2257.0, 516.0], "selected": false}}, {"custom_ports": [["i_foreground", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "foreground", "widgets": []}], ["i_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "mask", "widgets": []}], ["i_factor", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "factor", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 30, "manual_values": {"i_enabled": 1.0, "i_factor": 1.0, "i_foreground": "", "i_input": "", "i_interpolation": 1.0, "i_mask": "", "i_sizeref": "", "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_wrapping": 1.0, "o_enabled": 1.0, "o_output": ""}, "state": {}, "type": "DualMask", "ui_data": {"collapsed": false, "pos": [2922.0, 493.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 31, "manual_values": {"i_name": "m_doors", "o_output": ""}, "state": {}, "type": "GetTextureVar", "ui_data": {"collapsed": true, "pos": [2265.0, 920.0], "selected": false}}, {"custom_ports": [["i_dMaskRGB", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dMaskRGB", "widgets": []}], ["i_filter_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_mask", "widgets": []}], ["i_mask_factor", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_factor", "widgets": []}], ["i_mask_invert", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_invert", "widgets": []}], ["i_filter_mode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["input", "mask", "filtered", "input_filtered_masked", "input_masked", "filtered_masked"], "default": 3.0}, "dummy": false, "group": "additional", "hide": true, "manual_input": true, "name": "filter_mode", "widgets": []}], ["i_filter_bg", {"default": null, "dtype": "color", "dtype_args": {"default": [0.0, 0.0, 0.0, 0.0]}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_bg", "widgets": []}], ["i_uBrightness", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uBrightness", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 32, "manual_values": {"i_advanced_filtering": 0.0, "i_dMaskRGB": 0.0, "i_enabled": 1.0, "i_filter_bg": [0.0, 0.0, 0.0, 0.0], "i_filter_mask": "", "i_filter_mode": 3.0, "i_input": "", "i_interpolation": 1.0, "i_mask_factor": 1.0, "i_mask_invert": 0.0, "i_sizeref": "", "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_uBrightness": 0.10999999940395355, "i_wrapping": 1.0, "o_enabled": 1.0, "o_output": ""}, "state": {}, "type": "Brightness", "ui_data": {"collapsed": false, "pos": [3105.0, -300.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 33, "manual_values": {"i_name": "dropping_value", "o_output": 1.0000031349755798}, "state": {}, "type": "GetFloatVar", "ui_data": {"collapsed": true, "pos": [2815.0, -236.0], "selected": false}}, {"custom_ports": [["i_enabled", {"default": null, "dtype": "bool", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "enabled", "widgets": []}], ["i_n", {"default": null, "dtype": "int", "dtype_args": {"default": 4.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "n", "widgets": []}], ["i_offset", {"default": null, "dtype": "int", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "offset", "widgets": []}], ["i_p", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "p", "widgets": []}], ["i_reset_p", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "reset_p", "widgets": []}], ["o_event", {"default": null, "dtype": "event", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "event", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 34, "manual_values": {"i_enabled": 1.0, "i_evaluate_sometimes": 0.0, "i_module_enabled": 1.0, "i_module_name": "", "i_n": 4.0, "i_offset": 0.0, "i_p": 0.10000000149011612, "i_reset_p": 1.0, "o_dummy": 0.0, "o_event": 0.0}, "state": {}, "type": "EveryNBeat", "ui_data": {"collapsed": false, "pos": [1343.0, 989.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 35, "manual_values": {"i_condition": 1.0, "i_duration": 0.28999999165534973, "i_input": 0.0, "o_output": 0.0}, "state": {}, "type": "HoldBool", "ui_data": {"collapsed": false, "pos": [2333.0, 763.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 36, "manual_values": {"i_enabled": 1.0, "i_factor": 0.23000000417232513, "i_mod": 0.0, "i_reset": 0.0, "o_output": 1399.1977654378084}, "state": {"time": 1399.1977654378084}, "type": "Time", "ui_data": {"collapsed": false, "pos": [2291.0, 1203.0], "selected": false}}, {"custom_ports": [["i_dMaskRGB", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dMaskRGB", "widgets": []}], ["i_dSymmetric", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dSymmetric", "widgets": []}], ["i_filter_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_mask", "widgets": []}], ["i_mask_factor", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_factor", "widgets": []}], ["i_mask_invert", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_invert", "widgets": []}], ["i_filter_mode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["input", "mask", "filtered", "input_filtered_masked", "input_masked", "filtered_masked"], "default": 3.0}, "dummy": false, "group": "additional", "hide": true, "manual_input": true, "name": "filter_mode", "widgets": []}], ["i_filter_bg", {"default": null, "dtype": "color", "dtype_args": {"default": [0.0, 0.0, 0.0, 0.0]}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_bg", "widgets": []}], ["i_uTransformGlitch", {"default": null, "dtype": "mat4", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "uTransformGlitch", "widgets": []}], ["i_slices", {"default": null, "dtype": "float", "dtype_args": {"default": 3.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "slices", "widgets": []}], ["i_offset", {"default": null, "dtype": "float", "dtype_args": {"default": 100.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "offset", "widgets": []}], ["i_timeH", {"default": null, "dtype": "float", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "timeH", "widgets": []}], ["i_timeV", {"default": null, "dtype": "float", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "timeV", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 37, "manual_values": {"i_advanced_filtering": 0.0, "i_dMaskRGB": 0.0, "i_dSymmetric": 1.0, "i_enabled": 1.0, "i_filter_bg": [0.0, 0.0, 0.0, 0.0], "i_filter_mask": "", "i_filter_mode": 3.0, "i_input": "", "i_interpolation": 1.0, "i_mask_factor": 1.0, "i_mask_invert": 0.0, "i_offset": 100.0, "i_sizeref": "", "i_slices": 10.0, "i_timeH": 0.0, "i_timeV": 0.27000001072883606, "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_uTransformGlitch": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_wrapping": 1.0, "o_enabled": 0.0, "o_output": ""}, "state": {}, "type": "Slices", "ui_data": {"collapsed": false, "pos": [2652.0, 891.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 38, "manual_values": {"i_enabled": 1.0, "i_factor": 0.07000000029802322, "i_mod": 0.0, "i_reset": 0.0, "o_output": 469.43381256637804}, "state": {"time": 469.43381256637804}, "type": "Time", "ui_data": {"collapsed": false, "pos": [2321.0, 1368.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 39, "manual_values": {"i_input": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_theta": 90.0, "o_output": [[6.123234262925839e-17, 1.0, 0.0, 0.0], [-1.0, 6.123234262925839e-17, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]}, "state": {}, "type": "Rotate", "ui_data": {"collapsed": false, "pos": [1903.0, 1042.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 40, "manual_values": {"i_clamp_max": Infinity, "i_clamp_min": -Infinity, "i_generate": 0.0, "i_max": 90.0, "i_min": 0.0, "i_mod": 90.0, "o_output": 90.0}, "state": {"value": 90.0}, "type": "RandomFloat", "ui_data": {"collapsed": false, "pos": [1595.0, 1125.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 41, "manual_values": {"i_clamp_max": Infinity, "i_clamp_min": -Infinity, "i_generate": 0.0, "i_max": 20.0, "i_min": 5.0, "i_mod": 5.0, "o_output": 10.0}, "state": {"value": 10.0}, "type": "RandomFloat", "ui_data": {"collapsed": true, "pos": [2144.0, 973.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 42, "manual_values": {"i_input": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_x": -44.5, "i_y": 0.0, "o_output": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [-44.5, 0.0, 0.0, 1.0]]}, "state": {}, "type": "Translate", "ui_data": {"collapsed": true, "pos": [2610.0, -147.0], "selected": false}}, {"custom_ports": [["i_enabled", {"default": null, "dtype": "bool", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "enabled", "widgets": []}], ["i_n", {"default": null, "dtype": "int", "dtype_args": {"default": 4.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "n", "widgets": []}], ["i_offset", {"default": null, "dtype": "int", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "offset", "widgets": []}], ["i_p", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "p", "widgets": []}], ["i_reset_p", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "reset_p", "widgets": []}], ["o_event", {"default": null, "dtype": "event", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "event", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 43, "manual_values": {"i_enabled": 1.0, "i_evaluate_sometimes": 0.0, "i_module_enabled": 1.0, "i_module_name": "", "i_n": 4.0, "i_offset": 0.0, "i_p": 0.0, "i_reset_p": 1.0, "o_dummy": 0.0, "o_event": 0.0}, "state": {}, "type": "EveryNBeat", "ui_data": {"collapsed": false, "pos": [2204.0, -322.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 44, "manual_values": {"i_reset": 0.0, "i_set": 0.0, "i_toggle": 0.0, "i_v0": 0.0, "i_v1": 1.0, "o_output": 1.0}, "state": {"value": true}, "type": "SetResetToggle", "ui_data": {"collapsed": false, "pos": [2526.0, -321.0], "selected": false}}, {"custom_ports": [["i_dMaskRGB", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dMaskRGB", "widgets": []}], ["i_dInvertAlpha", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "additional", "hide": false, "manual_input": true, "name": "dInvertAlpha", "widgets": []}], ["i_filter_mask", {"default": null, "dtype": "tex2d", "dtype_args": {}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_mask", "widgets": []}], ["i_mask_factor", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_factor", "widgets": []}], ["i_mask_invert", {"default": null, "dtype": "bool", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "mask_invert", "widgets": []}], ["i_filter_mode", {"default": null, "dtype": "int", "dtype_args": {"choices": ["input", "mask", "filtered", "input_filtered_masked", "input_masked", "filtered_masked"], "default": 3.0}, "dummy": false, "group": "additional", "hide": true, "manual_input": true, "name": "filter_mode", "widgets": []}], ["i_filter_bg", {"default": null, "dtype": "color", "dtype_args": {"default": [0.0, 0.0, 0.0, 0.0]}, "dummy": false, "group": "default", "hide": true, "manual_input": true, "name": "filter_bg", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 45, "manual_values": {"i_advanced_filtering": 0.0, "i_dInvertAlpha": 0.0, "i_dMaskRGB": 0.0, "i_enabled": 1.0, "i_filter_bg": [0.0, 0.0, 0.0, 0.0], "i_filter_mask": "", "i_filter_mode": 3.0, "i_input": "", "i_interpolation": 1.0, "i_mask_factor": 1.0, "i_mask_invert": 0.0, "i_sizeref": "", "i_transformUV": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], "i_wrapping": 1.0, "o_enabled": 0.0, "o_output": ""}, "state": {}, "type": "Invert", "ui_data": {"collapsed": false, "pos": [2653.0, 415.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 46, "manual_values": {"i_f": 2.2899999618530273, "i_max": 1.0, "i_min": 0.0, "i_value": 0.5, "o_output": 0.0}, "state": {"time": 18304.728441667914}, "type": "PWM", "ui_data": {"collapsed": false, "pos": [2357.0, 297.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 47, "manual_values": {"i_v0": 0.0, "i_v1": 0.0, "o_output": 0.0}, "state": {}, "type": "And", "ui_data": {"collapsed": false, "pos": [2593.0, 327.0], "selected": false}}, {"custom_ports": [["i_enabled", {"default": null, "dtype": "bool", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "enabled", "widgets": []}], ["i_n", {"default": null, "dtype": "int", "dtype_args": {"default": 4.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "n", "widgets": []}], ["i_offset", {"default": null, "dtype": "int", "dtype_args": {"default": 0.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "offset", "widgets": []}], ["i_p", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "p", "widgets": []}], ["i_reset_p", {"default": null, "dtype": "float", "dtype_args": {"default": 1.0}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "reset_p", "widgets": []}], ["o_event", {"default": null, "dtype": "event", "dtype_args": {}, "dummy": false, "group": "default", "hide": false, "manual_input": true, "name": "event", "widgets": []}]], "extra": {"allow_preset_randomization": false}, "id": 48, "manual_values": {"i_enabled": 1.0, "i_evaluate_sometimes": 0.0, "i_module_enabled": 1.0, "i_module_name": "", "i_n": 4.0, "i_offset": 0.0, "i_p": 0.0, "i_reset_p": 1.0, "o_dummy": 0.0, "o_event": 0.0}, "state": {}, "type": "EveryNBeat", "ui_data": {"collapsed": false, "pos": [2748.0, 180.0], "selected": false}}, {"custom_ports": [], "extra": {"allow_preset_randomization": false}, "id": 49, "manual_values": {"i_condition": 1.0, "i_duration": 0.2, "i_input": 0.0, "o_output": 0.0}, "state": {}, "type": "HoldBool", "ui_data": {"collapsed": false, "pos": [2973.0, 347.0], "selected": false}}], "ui_data": {"offset": [1298.0, 154.0]}}